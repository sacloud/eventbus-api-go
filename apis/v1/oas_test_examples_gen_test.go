// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/validate"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestCommonServiceItem_EncodeDecode(t *testing.T) {
	var typ CommonServiceItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CommonServiceItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemBadRequest_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemConflict_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemConflict
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemConflict
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemCreated_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemCreated
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemCreated
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemInternalServerError_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemRequest_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemRequestCommonServiceItem_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemRequestCommonServiceItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemRequestCommonServiceItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateCommonServiceItemUnauthorized_EncodeDecode(t *testing.T) {
	var typ CreateCommonServiceItemUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateCommonServiceItemUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteCommonServiceItemBadRequest_EncodeDecode(t *testing.T) {
	var typ DeleteCommonServiceItemBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteCommonServiceItemBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteCommonServiceItemInternalServerError_EncodeDecode(t *testing.T) {
	var typ DeleteCommonServiceItemInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteCommonServiceItemInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteCommonServiceItemNotFound_EncodeDecode(t *testing.T) {
	var typ DeleteCommonServiceItemNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteCommonServiceItemNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteCommonServiceItemOK_EncodeDecode(t *testing.T) {
	var typ DeleteCommonServiceItemOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteCommonServiceItemOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteCommonServiceItemUnauthorized_EncodeDecode(t *testing.T) {
	var typ DeleteCommonServiceItemUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteCommonServiceItemUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestError_EncodeDecode(t *testing.T) {
	var typ Error
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Error
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}

func TestError_Examples(t *testing.T) {

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\"error_code\":\"bad_request\",\"error_msg\":\"不適切な要求です。パラメータの指定誤り、入力規則違反です。入力内容をご確認ください。\",\"is_fatal\":true,\"serial\":\"749ad39e1eea340c4d75bf5a4dd4bd11\",\"status\":\"400 Bad Request\"}"},
		{Input: "{\"error_code\":\"limit_count_in_account\",\"error_msg\":\"要求を受け付けできません。プロジェクトあたりのリソース数上限により、リソースの割り当てに失敗しました。\",\"is_fatal\":true,\"serial\":\"749ad39e1eea340c4d75bf5a4dd4bd11\",\"status\":\"409 Conflict\"}"},
		{Input: "{\"error_code\":\"unauthorized\",\"error_msg\":\"error-unauthorized\",\"is_fatal\":true,\"serial\":\"749ad39e1eea340c4d75bf5a4dd4bd11\",\"status\":\"401 Unauthorized\"}"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ Error

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				if validateErr, ok := errors.Into[*validate.Error](err); ok {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Encoder{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Bytes()), "Encoded: %s", e.Bytes())

			var typ2 Error
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Bytes())))
		})
	}
}
func TestGetCommonServiceItemBadRequest_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemInternalServerError_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemNotFound_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemOK_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemUnauthorized_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemsBadRequest_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemsInternalServerError_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemsOK_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemsOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemsOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetCommonServiceItemsUnauthorized_EncodeDecode(t *testing.T) {
	var typ GetCommonServiceItemsUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetCommonServiceItemsUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestIcon_EncodeDecode(t *testing.T) {
	var typ Icon
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Icon
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestProcessConfigurationSettings_EncodeDecode(t *testing.T) {
	var typ ProcessConfigurationSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ProcessConfigurationSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestProcessConfigurationSettingsDestination_EncodeDecode(t *testing.T) {
	var typ ProcessConfigurationSettingsDestination
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ProcessConfigurationSettingsDestination
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestProvider_EncodeDecode(t *testing.T) {
	var typ Provider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Provider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestProviderClass_EncodeDecode(t *testing.T) {
	var typ ProviderClass
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ProviderClass
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSacloudAPISecret_EncodeDecode(t *testing.T) {
	var typ SacloudAPISecret
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SacloudAPISecret
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}

func TestSacloudAPISecret_Examples(t *testing.T) {

	for i, tc := range []struct {
		Input string
	}{
		{Input: "{\"AccessToken\":\"アクセストークン\",\"AccessTokenSecret\":\"アクセストークンシークレット\"}"},
	} {
		tc := tc
		t.Run(fmt.Sprintf("Test%d", i+1), func(t *testing.T) {
			var typ SacloudAPISecret

			if err := typ.Decode(jx.DecodeStr(tc.Input)); err != nil {
				if validateErr, ok := errors.Into[*validate.Error](err); ok {
					t.Skipf("Validation error: %v", validateErr)
					return
				}
				require.NoErrorf(t, err, "Input: %s", tc.Input)
			}

			e := jx.Encoder{}
			typ.Encode(&e)
			require.True(t, std.Valid(e.Bytes()), "Encoded: %s", e.Bytes())

			var typ2 SacloudAPISecret
			require.NoError(t, typ2.Decode(jx.DecodeBytes(e.Bytes())))
		})
	}
}
func TestScheduleSettings_EncodeDecode(t *testing.T) {
	var typ ScheduleSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ScheduleSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestScheduleSettingsRecurringUnit_EncodeDecode(t *testing.T) {
	var typ ScheduleSettingsRecurringUnit
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ScheduleSettingsRecurringUnit
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestScheduleSettingsStartsAt_EncodeDecode(t *testing.T) {
	var typ ScheduleSettingsStartsAt
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ScheduleSettingsStartsAt
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretBadRequest_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretInternalServerError_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretNotFound_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretOK_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretOKProcess_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretOKProcess
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretOKProcess
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetProcessConfigurationSecretUnauthorized_EncodeDecode(t *testing.T) {
	var typ SetProcessConfigurationSecretUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetProcessConfigurationSecretUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetSecretRequest_EncodeDecode(t *testing.T) {
	var typ SetSecretRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetSecretRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetSecretRequestSecret_EncodeDecode(t *testing.T) {
	var typ SetSecretRequestSecret
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetSecretRequestSecret
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettings_EncodeDecode(t *testing.T) {
	var typ Settings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Settings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSimpleMQSecret_EncodeDecode(t *testing.T) {
	var typ SimpleMQSecret
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SimpleMQSecret
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestStatus_EncodeDecode(t *testing.T) {
	var typ Status
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 Status
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerConditionEq_EncodeDecode(t *testing.T) {
	var typ TriggerConditionEq
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerConditionEq
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerConditionEqOp_EncodeDecode(t *testing.T) {
	var typ TriggerConditionEqOp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerConditionEqOp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerConditionIn_EncodeDecode(t *testing.T) {
	var typ TriggerConditionIn
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerConditionIn
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerConditionInOp_EncodeDecode(t *testing.T) {
	var typ TriggerConditionInOp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerConditionInOp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerSettings_EncodeDecode(t *testing.T) {
	var typ TriggerSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTriggerSettingsConditionsItem_EncodeDecode(t *testing.T) {
	var typ TriggerSettingsConditionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TriggerSettingsConditionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemBadRequest_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemInternalServerError_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemNotFound_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemOK_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemOK
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemOK
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemRequest_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemRequestCommonServiceItem_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemRequestCommonServiceItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemRequestCommonServiceItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateCommonServiceItemUnauthorized_EncodeDecode(t *testing.T) {
	var typ UpdateCommonServiceItemUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateCommonServiceItemUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
