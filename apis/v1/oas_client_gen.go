// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// ConfigureProcessConfiguration invokes configureProcessConfiguration operation.
	//
	// 実行設定の設定変更.
	//
	// PUT /commonserviceitem
	ConfigureProcessConfiguration(ctx context.Context, request *ConfigureProcessConfigurationRequest, params ConfigureProcessConfigurationParams) (ConfigureProcessConfigurationRes, error)
	// ConfigureProcessConfigurationSecret invokes configureProcessConfigurationSecret operation.
	//
	// 実行設定のシークレット設定.
	//
	// PUT /admin/process-configurations/{id}/set-secret
	ConfigureProcessConfigurationSecret(ctx context.Context, request *ConfigureProcessConfigurationSecretRequest, params ConfigureProcessConfigurationSecretParams) (ConfigureProcessConfigurationSecretRes, error)
	// ConfigureSchedule invokes configureSchedule operation.
	//
	// Scheduleの設定変更.
	//
	// PUT /admin/schedules/{id}
	ConfigureSchedule(ctx context.Context, request *ConfigureScheduleRequest, params ConfigureScheduleParams) (ConfigureScheduleRes, error)
	// CreateProcessConfiguration invokes createProcessConfiguration operation.
	//
	// 実行設定の作成.
	//
	// POST /
	CreateProcessConfiguration(ctx context.Context, request *CreateProcessConfigurationRequest) (CreateProcessConfigurationRes, error)
	// CreateSchedule invokes createSchedule operation.
	//
	// Scheduleの作成.
	//
	// POST /admin/schedules/{id}
	CreateSchedule(ctx context.Context, request *CreateScheduleRequest, params CreateScheduleParams) (CreateScheduleRes, error)
	// DeleteProcessConfiguration invokes deleteProcessConfiguration operation.
	//
	// 実行設定の削除.
	//
	// DELETE /admin/process-configurations/{id}
	DeleteProcessConfiguration(ctx context.Context, params DeleteProcessConfigurationParams) (DeleteProcessConfigurationRes, error)
	// DeleteSchedule invokes deleteSchedule operation.
	//
	// Scheduleの削除.
	//
	// DELETE /admin/schedules/{id}
	DeleteSchedule(ctx context.Context, params DeleteScheduleParams) (DeleteScheduleRes, error)
	// GetProcessConfigurationById invokes getProcessConfigurationById operation.
	//
	// 指定されたIDに対応するプロセス設定情報を取得します。.
	//
	// GET /admin/process-configurations/{id}
	GetProcessConfigurationById(ctx context.Context, params GetProcessConfigurationByIdParams) (GetProcessConfigurationByIdRes, error)
	// GetProcessConfigurations invokes getProcessConfigurationsByAccount operation.
	//
	// アカウントに紐づく実行設定の一覧取得.
	//
	// GET /?{"Filter":{"Provider.Class":["eventbusprocessconfiguration"]}}
	GetProcessConfigurations(ctx context.Context) (GetProcessConfigurationsRes, error)
	// GetScheduleById invokes getScheduleById operation.
	//
	// 指定されたIDに対応するスケジュール情報を取得します。.
	//
	// GET /admin/schedules/{id}
	GetScheduleById(ctx context.Context, params GetScheduleByIdParams) (GetScheduleByIdRes, error)
	// GetSchedules invokes getSchedulesByAccount operation.
	//
	// アカウントに紐づくscheduleの一覧取得.
	//
	// GET /?{"Filter":{"Provider.Class":["eventbusschedule"]}}
	GetSchedules(ctx context.Context) (GetSchedulesRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// ConfigureProcessConfiguration invokes configureProcessConfiguration operation.
//
// 実行設定の設定変更.
//
// PUT /{id}
func (c *Client) ConfigureProcessConfiguration(ctx context.Context, request *ConfigureProcessConfigurationRequest, params ConfigureProcessConfigurationParams) (ConfigureProcessConfigurationRes, error) {
	res, err := c.sendConfigureProcessConfiguration(ctx, request, params)
	return res, err
}

func (c *Client) sendConfigureProcessConfiguration(ctx context.Context, request *ConfigureProcessConfigurationRequest, params ConfigureProcessConfigurationParams) (res ConfigureProcessConfigurationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	request.ProcessConfiguration.Provider.Class = "eventbusprocessconfiguration"

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeConfigureProcessConfigurationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, ConfigureProcessConfigurationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeConfigureProcessConfigurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ConfigureProcessConfigurationSecret invokes configureProcessConfigurationSecret operation.
//
// 実行設定のシークレット設定.
//
// PUT /admin/process-configurations/{id}/set-secret
func (c *Client) ConfigureProcessConfigurationSecret(ctx context.Context, request *ConfigureProcessConfigurationSecretRequest, params ConfigureProcessConfigurationSecretParams) (ConfigureProcessConfigurationSecretRes, error) {
	res, err := c.sendConfigureProcessConfigurationSecret(ctx, request, params)
	return res, err
}

func (c *Client) sendConfigureProcessConfigurationSecret(ctx context.Context, request *ConfigureProcessConfigurationSecretRequest, params ConfigureProcessConfigurationSecretParams) (res ConfigureProcessConfigurationSecretRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/eventbus/processconfiguration/set-secret"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeConfigureProcessConfigurationSecretRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, ConfigureProcessConfigurationSecretOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeConfigureProcessConfigurationSecretResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// ConfigureSchedule invokes configureSchedule operation.
//
// Scheduleの設定変更.
//
// PUT /{id}
func (c *Client) ConfigureSchedule(ctx context.Context, request *ConfigureScheduleRequest, params ConfigureScheduleParams) (ConfigureScheduleRes, error) {
	res, err := c.sendConfigureSchedule(ctx, request, params)
	return res, err
}

func (c *Client) sendConfigureSchedule(ctx context.Context, request *ConfigureScheduleRequest, params ConfigureScheduleParams) (res ConfigureScheduleRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	request.Schedule.Provider.Class = "eventbusschedule"

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeConfigureScheduleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, ConfigureScheduleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeConfigureScheduleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateProcessConfiguration invokes createProcessConfiguration operation.
//
// 実行設定の作成.
//
// POST /admin/process-configurations/{id}
func (c *Client) CreateProcessConfiguration(ctx context.Context, request *CreateProcessConfigurationRequest) (CreateProcessConfigurationRes, error) {
	res, err := c.sendCreateProcessConfiguration(ctx, request)
	return res, err
}

func (c *Client) sendCreateProcessConfiguration(ctx context.Context, request *CreateProcessConfigurationRequest) (res CreateProcessConfigurationRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	request.ProcessConfiguration.Provider.Class = "eventbusprocessconfiguration"

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateProcessConfigurationRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, CreateProcessConfigurationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateProcessConfigurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// CreateSchedule invokes createSchedule operation.
//
// Scheduleの作成.
//
// POST /
func (c *Client) CreateSchedule(ctx context.Context, request *CreateScheduleRequest) (CreateScheduleRes, error) {
	res, err := c.sendCreateSchedule(ctx, request)
	return res, err
}

func (c *Client) sendCreateSchedule(ctx context.Context, request *CreateScheduleRequest) (res CreateScheduleRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/"
	uri.AddPathParts(u, pathParts[:]...)

	request.Schedule.Provider.Class = "eventbusschedule"

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateScheduleRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, CreateScheduleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateScheduleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteProcessConfiguration invokes deleteProcessConfiguration operation.
//
// 実行設定の削除.
//
// DELETE /{id}
func (c *Client) DeleteProcessConfiguration(ctx context.Context, params DeleteProcessConfigurationParams) (DeleteProcessConfigurationRes, error) {
	res, err := c.sendDeleteProcessConfiguration(ctx, params)
	return res, err
}

func (c *Client) sendDeleteProcessConfiguration(ctx context.Context, params DeleteProcessConfigurationParams) (res DeleteProcessConfigurationRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, DeleteProcessConfigurationOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteProcessConfigurationResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteSchedule invokes deleteSchedule operation.
//
// Scheduleの削除.
//
// DELETE /{id}
func (c *Client) DeleteSchedule(ctx context.Context, params DeleteScheduleParams) (DeleteScheduleRes, error) {
	res, err := c.sendDeleteSchedule(ctx, params)
	return res, err
}

func (c *Client) sendDeleteSchedule(ctx context.Context, params DeleteScheduleParams) (res DeleteScheduleRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, DeleteScheduleOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteScheduleResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetProcessConfigurationById invokes getProcessConfigurationById operation.
//
// 指定されたIDに対応するプロセス設定情報を取得します。.
//
// GET /{id}
func (c *Client) GetProcessConfigurationById(ctx context.Context, params GetProcessConfigurationByIdParams) (GetProcessConfigurationByIdRes, error) {
	res, err := c.sendGetProcessConfigurationById(ctx, params)
	return res, err
}

func (c *Client) sendGetProcessConfigurationById(ctx context.Context, params GetProcessConfigurationByIdParams) (res GetProcessConfigurationByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"

	// Encode "id" parameter.
	e := uri.NewPathEncoder(uri.PathEncoderConfig{
		Param:   "id",
		Style:   uri.PathStyleSimple,
		Explode: false,
	})
	if err := func() error {
		return e.EncodeValue(conv.StringToString(params.ID))
	}(); err != nil {
		return res, errors.Wrap(err, "encode path")
	}
	encoded, err := e.Result()
	if err != nil {
		return res, errors.Wrap(err, "encode path")
	}
	pathParts[1] = encoded

	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, GetProcessConfigurationByIdOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetProcessConfigurationByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetProcessConfigurations invokes getProcessConfigurationsByAccount operation.
//
// アカウントに紐づく実行設定の一覧取得.
//
// GET /?{"Filter":{"Provider.Class":["eventbusprocessconfiguration"]}}
func (c *Client) GetProcessConfigurations(ctx context.Context) (GetProcessConfigurationsRes, error) {
	res, err := c.sendGetProcessConfigurations(ctx)
	return res, err
}

func (c *Client) sendGetProcessConfigurations(ctx context.Context) (res GetProcessConfigurationsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/?{\"Filter\":{\"Provider.Class\":[\"eventbusprocessconfiguration\"]}}"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, GetProcessConfigurationsOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetProcessConfigurationsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetScheduleById invokes getScheduleById operation.
//
// 指定されたIDに対応するスケジュール情報を取得します。.
//
// GET /{id}
func (c *Client) GetScheduleById(ctx context.Context, params GetScheduleByIdParams) (GetScheduleByIdRes, error) {
	res, err := c.sendGetScheduleById(ctx, params)
	return res, err
}

func (c *Client) sendGetScheduleById(ctx context.Context, params GetScheduleByIdParams) (res GetScheduleByIdRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, GetScheduleByIdOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetScheduleByIdResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetSchedules invokes getSchedulesByAccount operation.
//
// アカウントに紐づくscheduleの一覧取得.
//
// GET /?{"Filter":{"Provider.Class":["eventbusschedule"]}}
func (c *Client) GetSchedules(ctx context.Context) (GetSchedulesRes, error) {
	res, err := c.sendGetSchedules(ctx)
	return res, err
}

func (c *Client) sendGetSchedules(ctx context.Context) (res GetSchedulesRes, err error) {

	u := uri.Clone(c.requestURL(ctx))

	// ogenベースのコードに合わせるため冗長にしていて、パラメータが固定値なので文字列に直接埋め込み
	var pathParts [1]string
	pathParts[0] = "/?{\"Filter\":{\"Provider.Class\":[\"eventbusschedule\"]}}"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityCloudCtrlAuth(ctx, GetSchedulesOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"CloudCtrlAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetSchedulesResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

