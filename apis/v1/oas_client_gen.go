// Code generated by ogen, DO NOT EDIT.

package v1

import (
	"context"
	"net/url"
	"strings"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// CreateCommonServiceItem invokes createCommonServiceItem operation.
	//
	// 実行設定・スケジュール・トリガーの作成.
	//
	// POST /commonserviceitem
	CreateCommonServiceItem(ctx context.Context, request *CreateCommonServiceItemRequest) (CreateCommonServiceItemRes, error)
	// DeleteCommonServiceItem invokes deleteCommonServiceItem operation.
	//
	// 実行設定・スケジュール・トリガーの削除.
	//
	// DELETE /commonserviceitem/{id}
	DeleteCommonServiceItem(ctx context.Context, params DeleteCommonServiceItemParams) (DeleteCommonServiceItemRes, error)
	// GetCommonServiceItem invokes getCommonServiceItem operation.
	//
	// 実行設定・スケジュール・トリガーの取得.
	//
	// GET /commonserviceitem/{id}
	GetCommonServiceItem(ctx context.Context, params GetCommonServiceItemParams) (GetCommonServiceItemRes, error)
	// GetCommonServiceItems invokes getCommonServiceItems operation.
	//
	// Provider.
	// Classでeventbusschedule、eventbustriggerまたはeventbusprocessconfigurationを指定してフィルタ可能。
	// クエリパラメータに下記のようにフィルタを設定することでスケジュール、トリガーまたは実行設定のリソースのみを取得できます
	// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbusschedule"}}`
	// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbustrigger"}}`
	// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbusprocessconfiguration"}}`.
	//
	// GET /commonserviceitem
	GetCommonServiceItems(ctx context.Context) (GetCommonServiceItemsRes, error)
	// SetProcessConfigurationSecret invokes setProcessConfigurationSecret operation.
	//
	// 実行設定のSecret設定.
	//
	// PUT /commonserviceitem/{id}/eventbus/processconfiguration/set-secret
	SetProcessConfigurationSecret(ctx context.Context, request *SetSecretRequest, params SetProcessConfigurationSecretParams) (SetProcessConfigurationSecretRes, error)
	// UpdateCommonServiceItem invokes updateCommonServiceItem operation.
	//
	// 実行設定・スケジュール・トリガーの更新.
	//
	// PUT /commonserviceitem/{id}
	UpdateCommonServiceItem(ctx context.Context, request *UpdateCommonServiceItemRequest, params UpdateCommonServiceItemParams) (UpdateCommonServiceItemRes, error)
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	sec       SecuritySource
	baseClient
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, sec SecuritySource, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		sec:        sec,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// CreateCommonServiceItem invokes createCommonServiceItem operation.
//
// 実行設定・スケジュール・トリガーの作成.
//
// POST /commonserviceitem
func (c *Client) CreateCommonServiceItem(ctx context.Context, request *CreateCommonServiceItemRequest) (CreateCommonServiceItemRes, error) {
	res, err := c.sendCreateCommonServiceItem(ctx, request)
	return res, err
}

func (c *Client) sendCreateCommonServiceItem(ctx context.Context, request *CreateCommonServiceItemRequest) (res CreateCommonServiceItemRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/commonserviceitem"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCreateCommonServiceItemRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, CreateCommonServiceItemOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeCreateCommonServiceItemResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteCommonServiceItem invokes deleteCommonServiceItem operation.
//
// 実行設定・スケジュール・トリガーの削除.
//
// DELETE /commonserviceitem/{id}
func (c *Client) DeleteCommonServiceItem(ctx context.Context, params DeleteCommonServiceItemParams) (DeleteCommonServiceItemRes, error) {
	res, err := c.sendDeleteCommonServiceItem(ctx, params)
	return res, err
}

func (c *Client) sendDeleteCommonServiceItem(ctx context.Context, params DeleteCommonServiceItemParams) (res DeleteCommonServiceItemRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/commonserviceitem/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, DeleteCommonServiceItemOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeDeleteCommonServiceItemResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCommonServiceItem invokes getCommonServiceItem operation.
//
// 実行設定・スケジュール・トリガーの取得.
//
// GET /commonserviceitem/{id}
func (c *Client) GetCommonServiceItem(ctx context.Context, params GetCommonServiceItemParams) (GetCommonServiceItemRes, error) {
	res, err := c.sendGetCommonServiceItem(ctx, params)
	return res, err
}

func (c *Client) sendGetCommonServiceItem(ctx context.Context, params GetCommonServiceItemParams) (res GetCommonServiceItemRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/commonserviceitem/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, GetCommonServiceItemOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCommonServiceItemResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetCommonServiceItems invokes getCommonServiceItems operation.
//
// Provider.
// Classでeventbusschedule、eventbustriggerまたはeventbusprocessconfigurationを指定してフィルタ可能。
// クエリパラメータに下記のようにフィルタを設定することでスケジュール、トリガーまたは実行設定のリソースのみを取得できます
// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbusschedule"}}`
// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbustrigger"}}`
// `/commonserviceitem?{"Filter":{"Provider.Class":"eventbusprocessconfiguration"}}`.
//
// GET /commonserviceitem
func (c *Client) GetCommonServiceItems(ctx context.Context) (GetCommonServiceItemsRes, error) {
	res, err := c.sendGetCommonServiceItems(ctx)
	return res, err
}

func (c *Client) sendGetCommonServiceItems(ctx context.Context) (res GetCommonServiceItemsRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/commonserviceitem"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, GetCommonServiceItemsOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeGetCommonServiceItemsResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// SetProcessConfigurationSecret invokes setProcessConfigurationSecret operation.
//
// 実行設定のSecret設定.
//
// PUT /commonserviceitem/{id}/eventbus/processconfiguration/set-secret
func (c *Client) SetProcessConfigurationSecret(ctx context.Context, request *SetSecretRequest, params SetProcessConfigurationSecretParams) (SetProcessConfigurationSecretRes, error) {
	res, err := c.sendSetProcessConfigurationSecret(ctx, request, params)
	return res, err
}

func (c *Client) sendSetProcessConfigurationSecret(ctx context.Context, request *SetSecretRequest, params SetProcessConfigurationSecretParams) (res SetProcessConfigurationSecretRes, err error) {

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [3]string
	pathParts[0] = "/commonserviceitem/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	pathParts[2] = "/eventbus/processconfiguration/set-secret"
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeSetProcessConfigurationSecretRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, SetProcessConfigurationSecretOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeSetProcessConfigurationSecretResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// UpdateCommonServiceItem invokes updateCommonServiceItem operation.
//
// 実行設定・スケジュール・トリガーの更新.
//
// PUT /commonserviceitem/{id}
func (c *Client) UpdateCommonServiceItem(ctx context.Context, request *UpdateCommonServiceItemRequest, params UpdateCommonServiceItemParams) (UpdateCommonServiceItemRes, error) {
	res, err := c.sendUpdateCommonServiceItem(ctx, request, params)
	return res, err
}

func (c *Client) sendUpdateCommonServiceItem(ctx context.Context, request *UpdateCommonServiceItemRequest, params UpdateCommonServiceItemParams) (res UpdateCommonServiceItemRes, err error) {
	// Validate request before sending.
	if err := func() error {
		if err := request.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return res, errors.Wrap(err, "validate")
	}

	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/commonserviceitem/"
	{
		// Encode "id" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "id",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.StringToString(params.ID))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	r, err := ht.NewRequest(ctx, "PUT", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeUpdateCommonServiceItemRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	{
		type bitset = [1]uint8
		var satisfied bitset
		{

			switch err := c.securityApiKeyAuth(ctx, UpdateCommonServiceItemOperation, r); {
			case err == nil: // if NO error
				satisfied[0] |= 1 << 0
			case errors.Is(err, ogenerrors.ErrSkipClientSecurity):
				// Skip this security.
			default:
				return res, errors.Wrap(err, "security \"ApiKeyAuth\"")
			}
		}

		if ok := func() bool {
		nextRequirement:
			for _, requirement := range []bitset{
				{0b00000001},
			} {
				for i, mask := range requirement {
					if satisfied[i]&mask != mask {
						continue nextRequirement
					}
				}
				return true
			}
			return false
		}(); !ok {
			return res, ogenerrors.ErrSecurityRequirementIsNotSatisfied
		}
	}

	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	result, err := decodeUpdateCommonServiceItemResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
